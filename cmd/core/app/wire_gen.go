// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"auditLog/db/storage/mongo_store"
	"auditLog/internal/core/port/inboundprt/audit_log_prt"
	"auditLog/internal/core/port/outboundprt/repositoryprt"
	"auditLog/internal/core/service/audit_log_srv"
	"auditLog/internal/inboundadpt/audit_log_grpc"
	"auditLog/internal/inboundadpt/audit_log_rabbit"
	"auditLog/internal/outboundadpt/audit/mongo"
	"auditLog/pkg/grpcserver"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApp(grpcAddress grpcserver.AddressURI, httpAddress HTTPAddressURI, dBURI mongo_store.DatabaseURI, brokerURI audit_log_rabbit.RabbitURI) (App, func(), error) {
	options, err := provideAuditStorage(dBURI)
	if err != nil {
		return App{}, nil, err
	}
	auditLogRepository := mongo.New(options)
	server := provideGrpcServer(grpcAddress, auditLogRepository)
	serveMux := provideGatewayMUX()
	clientConn, err := provideGrpcClient(grpcAddress)
	if err != nil {
		return App{}, nil, err
	}
	service := audit_log_srv.New(auditLogRepository)
	audit_log_grpcService := audit_log_grpc.New(service, server)
	grpcGatewayMux, err := provideGatewayRegisteredMUX(serveMux, clientConn, audit_log_grpcService)
	if err != nil {
		return App{}, nil, err
	}
	app := provideGatewayServer(grpcGatewayMux)
	rabbitMQ, err := provideAuditBroker(brokerURI, audit_log_grpcService)
	if err != nil {
		return App{}, nil, err
	}
	appApp := provideApp(httpAddress, server, app, rabbitMQ)
	return appApp, func() {
	}, nil
}

// wire.go:

type HTTPAddressURI string

var repoSet = wire.NewSet(wire.Bind(new(repository_prt.AuditLogRepository), new(mongo.AuditLogRepository)), mongo.New)

var serviceSet = wire.NewSet(audit_log_srv.New, wire.Bind(new(audit_log_prt.AuditLogService), new(audit_log_srv.Service)))

var grpcServiceSet = wire.NewSet(audit_log_grpc.New)
